//findviewbyid
실행 시 처음엔 first_fragment text가 나오고
next 버튼을 누르면 secont_fragment text가 나오는데
textview의 id로 접속을 해서 .text라는 property에 대해서 string을 지정해주는 명령을 준 것.
하지만 두 fragment의 id가 같을 때 어디에서 가져온 id인지 알 수 없음
이러한 문제 때문에 viewBinding을 사용함.


//viewbinding => build.gradle(app)
viewBinding {
    enabled = true //viewBinding을 사용하도록 enabled을 true로 지정.
}
=> 적용되는 순간 모든 XML 파일에 대해 binding 클래스가 생성됨


//MainActivity.kt
onCreate() 부분에서 findViewById 부분을 viewBinding을 대체할 것임

binding = ActivityMainBinding.inflate(layoutInflater)
=>binding 변수를 만들고 자동으로 생성되는 binding클래스(ActivityMainBinding)의 인스턴스를 만들어줌

setContentView(binding.root)
=>activity_main.xml의 가장 높은 부분의 참조를 가져오도록 함.
이 밑으로는 binding의 property로 사용할 수 있음

setSupportActionBar(binding.toolbar).


//FirstFragment.kt
    private var _binding: FragmentFirstBinding? = null
    =>fragment에서 viewbinding을 사용할 때는 null이 들어갈 수 있는
    optional 형태의 _binding 변수를 만들어줌

    private val binding get() = _binding!!
    =>그리고 실제로 사용하는 optional을 벗긴 binding을 하나 더 만들어줌

    왜냐면 viewbinding을 할 때 만들어지는 자원을 fragment를 사용하지 않을 때
    바로 반환할 수 있도록 onDestroyView()에서 _binding을 null로 만들어줘야 하기 때문에
    null이 들어가는 형태로 _binding을 우선 만들고 실제로 사용하는 binding 변수를 하나 더 만드는 것.

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentFirstBinding.inflate(inflater, container, false)
        =>_binding에 대해서 인스턴스를 만들어주는데 클래스이름을 뒤집은 다음 Binding을 붙이는 형태로 자동 클래스 생성된거를
        인스턴스로 만들어주고, 인스턴스가 만들어지면서 binding도 자동으로 생성
        return binding.root
        =>실제로 사용되는 binding에 대해서 가장 높은 곳에 있는 걸 반환

    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
//        textview_first.text = "first_fragment text" //자동으로 textview_first를 import하고 text를 지정해 줄 수 있음
        binding.textview.text = "first_fragment text"
        binding.buttonFirst.setOnClickListener {
            findNavController().navigate(R.id.action_FirstFragment_to_SecondFragment)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }